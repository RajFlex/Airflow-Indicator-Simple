/*
 * #12 : ABP Sensor Output on PCD 8544 with Buttons and Bitmap, with if else conditions.
 *  Reference codes - 
 *  08_HelloWorld_u8g2 
 *  06_InitialTest_MPRSensorI2C, same as the I2C sketch from ABP2 series datasheet
 *  07_AFIBasicP4_Rev3
 *  10_ABP2SensorOutputOnPCD_SetandBuzzerButton
 *  11_ABP2SensorOutputOnPCD_Buttons_Bitmap_Tick
 *  12_ABP2SensorOutputOnPCD_Buttons_Bitmap_ifelseconditions
 *  
 *  Scope of this sketch:
 *  To display cross and tick bitmaps using u8g2 library following the if else conditions based on comparison between current pressure and set pressure readings.
 *  
 */

// ------------------------------------Step I : Include Libraries-------------------------
 
// For Screen
#include <Arduino.h>
#include <U8g2lib.h>

// ------------------------------------Step II : Pin definitions & Instances -------------------------
#ifdef U8X8_HAVE_HW_SPI
#include <SPI.h>
#endif
#ifdef U8X8_HAVE_HW_I2C
#include <Wire.h>
#endif

U8G2_PCD8544_84X48_F_4W_SW_SPI u8g2(U8G2_R0, /* clock=*/ 8, /* data=*/ 4, /* cs=*/ 7, /* dc=*/ 5, /* reset=*/ 6);  // Nokia 5110 Display constructor

// ------------------------------------Step III : Global Variables -------------------------
// For Sensor
uint8_t id = 0x28; // i2c address
uint8_t data[7]; // holds output data
uint8_t cmd[3] = {0xAA, 0x00, 0x00}; // command to be sent
double press_counts = 0; // digital pressure reading [counts]
double temp_counts = 0; // digital temperature reading [counts]
double currentPressure= 0; // pressure reading [bar, psi, kPa, etc.]
double temperature = 0; // temperature reading in deg C
double outputmax = 15099494; // output at maximum pressure [counts]
double outputmin = 1677722; // output at minimum pressure [counts]
double pmax = 1; // maximum value of pressure range [bar, psi, kPa, etc.]
double pmin = 0; // minimum value of pressure range [bar, psi, kPa, etc.]
double percentage = 0; // holds percentage of full scale data
char printBuffer[200], cBuff[20], percBuff[20], currentPressure_str[20], tBuff[20];
int sound_reg = 0; // tells teh uC if sound is on (1) or off (0). Sound is off by default

static const unsigned char tick_bits[] U8X8_PROGMEM  = { 0x00,0x00,0x00,0x80,0x00,0x00,0x00,0x00,0x00,0x80,0x03,0x00,0x00,0x00,0x00,
 0xc0,0x1f,0x00,0x00,0x00,0x00,0xe0,0xff,0x03,0x00,0x00,0x00,0xe0,0xff,0x01,
 0x00,0x00,0x00,0xf0,0xff,0x00,0x00,0x00,0x00,0xf0,0x7f,0x00,0x00,0x00,0x00,
 0xf8,0x3f,0x00,0x00,0x00,0x00,0xf8,0x1f,0x00,0x00,0x00,0x00,0xfc,0x1f,0x00,
 0x00,0x00,0x00,0xfc,0x0f,0x00,0x00,0x00,0x00,0xfe,0x06,0x00,0x00,0x00,0x00,
 0xfe,0x03,0x00,0x00,0x00,0x00,0xff,0x03,0x00,0x00,0x00,0x00,0xff,0x01,0x00,
 0x00,0x00,0x80,0xff,0x00,0x00,0x00,0x00,0x80,0x7f,0x00,0x00,0x00,0x00,0xc0,
 0x7f,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,0x00,0x00,0xe0,0x3f,0x00,0x00,
 0x00,0x00,0xe0,0x1f,0x00,0x00,0x00,0x00,0xf0,0x0f,0x00,0x00,0x30,0x00,0xf8,
 0x0f,0x00,0x00,0x38,0x00,0xf8,0x07,0x00,0x00,0x7c,0x00,0xfc,0x03,0x00,0x00,
 0x7c,0x00,0xfc,0x03,0x00,0x00,0x7e,0x00,0xfe,0x01,0x00,0x00,0xff,0x00,0xfe,
 0x00,0x00,0x00,0xff,0x00,0xff,0x00,0x00,0x00,0xfe,0x01,0x7f,0x00,0x00,0x00,
 0xfe,0x81,0x7f,0x00,0x00,0x00,0xfc,0x81,0x3f,0x00,0x00,0x00,0xfc,0xc3,0x1f,
 0x00,0x00,0x00,0xf8,0xc3,0x1f,0x00,0x00,0x00,0xf8,0xe3,0x0f,0x00,0x00,0x00,
 0xf0,0xf7,0x0f,0x00,0x00,0x00,0xf0,0xff,0x07,0x00,0x00,0x00,0xe0,0xff,0x07,
 0x00,0x00,0x00,0xe0,0xff,0x03,0x00,0x00,0x00,0xc0,0xf7,0x03,0x00,0x00,0x00,
 0xc0,0xff,0x01,0x00,0x00,0x00,0x80,0xff,0x01,0x00,0x00,0x00,0x80,0xff,0x00,
 0x00,0x00,0x00,0x00,0xff,0x00,0x00,0x00,0x00,0x00,0x7f,0x00,0x00,0x00,0x00,
 0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x3e,0x00,0x00,0x00,0x00,0x00,0x18,0x00,
 0x00,0x00,0x00};


static const unsigned char cross_bits[] U8X8_PROGMEM  = {  0x80,0x01,0x00,0x00,0x06,0x00,0xc0,0x03,0x00,0x00,0x0f,0x00,0xe0,0x07,0x00,
 0x80,0x1f,0x00,0xf0,0x0f,0x00,0xc0,0x3f,0x00,0xf8,0x0f,0x00,0xc0,0x3f,0x00,
 0xf8,0x1f,0x00,0xe0,0xff,0x00,0xfc,0x3f,0x00,0xf0,0xff,0x00,0xfe,0x7f,0x00,
 0xf8,0xff,0x01,0xff,0xff,0x00,0xfc,0xff,0x03,0xff,0xff,0x01,0xfe,0xff,0x03,
 0xfe,0xff,0x03,0xff,0xff,0x01,0xfe,0xff,0x87,0xff,0xff,0x00,0xfc,0xff,0xc7,
 0xff,0xff,0x00,0xf8,0xff,0xcf,0xff,0x7f,0x00,0xf0,0xff,0xff,0xff,0x3f,0x00,
 0xe0,0xff,0xff,0xff,0x1f,0x00,0xc0,0xff,0xff,0xff,0x0f,0x00,0x80,0xff,0xff,
 0xff,0x07,0x00,0x00,0xff,0xff,0xff,0x03,0x00,0x00,0xff,0xff,0xff,0x03,0x00,
 0x00,0xfe,0xff,0xff,0x01,0x00,0x00,0xfc,0xff,0xff,0x00,0x00,0x00,0xf8,0xff,
 0x7f,0x00,0x00,0x00,0xf0,0xff,0x3f,0x00,0x00,0x00,0xf0,0xff,0x3f,0x00,0x00,
 0x00,0xf8,0xff,0x7f,0x00,0x00,0x00,0xfc,0xff,0xff,0x00,0x00,0x00,0xfe,0xff,
 0xff,0x01,0x00,0x00,0xfe,0xff,0xff,0x01,0x00,0x00,0xff,0xff,0xff,0x03,0x00,
 0x80,0xff,0xff,0xff,0x07,0x00,0xc0,0xff,0xff,0xff,0x0f,0x00,0xe0,0xff,0xff,
 0xff,0x1f,0x00,0xf0,0xff,0xff,0xff,0x3f,0x00,0xf8,0xff,0xcf,0xff,0x7f,0x00,
 0xfc,0xff,0xc7,0xff,0xff,0x00,0xfc,0xff,0x87,0xff,0xff,0x00,0xfe,0xff,0x03,
 0xff,0xff,0x01,0xff,0xff,0x01,0xfe,0xff,0x03,0xff,0xff,0x00,0xfc,0xff,0x03,
 0xfe,0x7f,0x00,0xf8,0xff,0x01,0xfc,0x3f,0x00,0xf0,0xff,0x00,0xfc,0x1f,0x00,
 0xe0,0x7f,0x00,0xf0,0x1f,0x00,0xe0,0x7f,0x00,0xf0,0x0f,0x00,0xc0,0x3f,0x00,
 0xe0,0x07,0x00,0x80,0x1f,0x00,0xc0,0x03,0x00,0x00,0x0f,0x00,0x80,0x01,0x00,
 0x00,0x06,0x00 };


static const unsigned char soundon_bits[] U8X8_PROGMEM  = { 0x40,0x04,0x60,0x08,0x70,0x12,0x7c,0x14,0x7c,0x15,0x7c,0x15,0x7c,0x14,0x70,
 0x12,0x60,0x08,0x40,0x04 };
 
static const unsigned char soundoff_bits[] U8X8_PROGMEM  = { 0x40,0x00,0x60,0x00,0x70,0x00,0x7c,0x11,0x7c,0x0a,0x7c,0x04,0x7c,0x0a,0x70,
 0x11,0x60,0x00,0x40,0x00 };
 
int soundbits_x = 84-21+5+3; // starting x position of sound icon bitmap
int soundbits_y = 48/2-15/2+2; // starting y position of sound icon bitmap
 
int setButtonPin = 9; // define pin number for set button
int sounderButtonPin = PD2; // define pin number for sounder button

char setPressure_str[20]; // char string to display set pressure on the screen
double setPressure = 0; // To store set pressure

// ------------------------------------Step IV : Void Setup -------------------------

void setup(void) {

  // For Screen
 u8g2.begin();
 Wire.begin();

}

// ------------------------------------Step V : Void Loop -------------------------

void loop(void) {

  //For Buttons
  int setButtonState;
  setButtonState = digitalRead(setButtonPin); 

  int sounderButtonState;
  sounderButtonState = digitalRead(sounderButtonPin); 

  // For Sensor
 Wire.beginTransmission(id);
 int stat = Wire.write (cmd, 3); // write command to the sensor
 stat |= Wire.endTransmission();
 delay(10);
 Wire.requestFrom(id, 7); // read back Sensor data 7 bytes
 int i = 0;
 for (i = 0; i < 7; i++) {
 data [i] = Wire.read();
 }
 press_counts = data[3] + data[2] * 256 + data[1] * 65536; // calculate digital pressure counts
 temp_counts = data[6] + data[5] * 256 + data[4] * 65536; // calculate digital temperature counts
 temperature = (temp_counts * 200 / 16777215) - 50; // calculate temperature in deg c
 percentage = (press_counts / 16777215) * 100; // calculate pressure as percentage of full scale
 //calculation of pressure value according to equation 2 of datasheet
 currentPressure= (((press_counts - outputmin) * (pmax - pmin)) / (outputmax - outputmin) + pmin)*6895; //*6.89476 converts PSI to Pa
 dtostrf(press_counts, 4, 1, cBuff);
 dtostrf(percentage, 4, 3, percBuff);
 dtostrf(currentPressure, 4, 2, currentPressure_str);
 dtostrf(temperature, 4, 3, tBuff);
 delay(10);

if(setButtonState == HIGH) // Means that SET button is pressed
  {
   u8g2.clearBuffer();          // clear the internal memory
   setPressure = currentPressure; //save the current value to setPressure variable, both are double type
   dtostrf(setPressure,4,2,setPressure_str); //// Convert setPressure float variable to character array for displaying
   u8g2.drawStr(0,30,"Pressure set to:");
   u8g2.drawStr(0,40,setPressure_str); // display pressure in string format
   u8g2.sendBuffer();  
   delay (2000); // display this page for 2 seconds
  }
if (setPressure == 0)
  {
    u8g2.clearBuffer();          // clear the internal memory
    u8g2.drawStr(0,30,"Pressure not set");
    u8g2.sendBuffer(); 
    
  }
// Check if sound is on or off
    if (sounderButtonState == HIGH && sound_reg ==0)
    {
     sound_reg = 1;
    }
    else if (sounderButtonState == HIGH && sound_reg == 1)
    {
     sound_reg = 0;
    }  

if (setPressure != 0 && currentPressure > setPressure) //When pressure is higher than set pressure
  { 
  // For Screen
  u8g2.clearBuffer();          // clear the internal memory
  u8g2.drawXBMP(37, 0, 48, 50, cross_bits); //draw bitmap with top left corner at x=37,y=0, width of bitmap w= 48 pixels, height = 50 pixels source:https://github.com/olikraus/u8glib/wiki/userreference#drawxbmp:~:text=u8g.drawXBMP(%200%2C%200%2C%20u8g_logo_width%2C%20u8g_logo_height%2C%20u8g_logo_bits)%3B
    if (sound_reg == 1)
    {
      u8g2.drawXBMP(soundbits_x, soundbits_y, 13, 10, soundon_bits); 
    }  
    else if(sound_reg == 0)
    {
      u8g2.drawXBMP(soundbits_x, soundbits_y, 13, 10, soundoff_bits); 
    }
  u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
  u8g2.drawStr(0,10,"Current:");  
  u8g2.drawStr(0,20,currentPressure_str);  // display current pressure 
  u8g2.drawStr(0,30,"Set:");  
  u8g2.drawStr(0,40,setPressure_str);  // display set pressure    
  u8g2.sendBuffer();          // transfer internal memory to the display
}

else if(setPressure != 0 && currentPressure < setPressure) // When pressure is lower than set pressure
{
  // For Screen
  u8g2.clearBuffer();          // clear the internal memory
  u8g2.drawXBMP(37, 0, 48, 50, tick_bits); //draw bitmap with top left corner at x=37,y=0, width of bitmap w= 48 pixels, height = 50 pixels source:https://github.com/olikraus/u8glib/wiki/userreference#drawxbmp:~:text=u8g.drawXBMP(%200%2C%200%2C%20u8g_logo_width%2C%20u8g_logo_height%2C%20u8g_logo_bits)%3B
    if (sound_reg == 1)
    {
      u8g2.drawXBMP(soundbits_x, soundbits_y, 13, 10, soundon_bits); 
    }  
    else if(sound_reg == 0)
    {
      u8g2.drawXBMP(soundbits_x, soundbits_y, 13, 10, soundoff_bits); 
    } 
  u8g2.setFont(u8g2_font_ncenB08_tr); // choose a suitable font
  u8g2.drawStr(0,10,"Current:");  
  u8g2.drawStr(0,20,currentPressure_str);  // display current pressure 
  u8g2.drawStr(0,30,"Set:");  
  u8g2.drawStr(0,40,setPressure_str);  // display set pressure    
  u8g2.sendBuffer();          // transfer internal memory to the display

}
}

/*
 * Add zero button feature? = double click sounder button
 */
